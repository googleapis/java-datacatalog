// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/datacatalog/v1/datacatalog.proto

package com.google.cloud.datacatalog.v1;

/**
 * <pre>
 * The enum field that lists all the types of entry resources in Data
 * Catalog. For example, a BigQuery table entry has the `TABLE` type.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.datacatalog.v1.EntryType}
 */
public enum EntryType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default unknown type.
   * </pre>
   *
   * <code>ENTRY_TYPE_UNSPECIFIED = 0;</code>
   */
  ENTRY_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * The entry type that has a GoogleSQL schema, including
   * logical views.
   * </pre>
   *
   * <code>TABLE = 2;</code>
   */
  TABLE(2),
  /**
   * <pre>
   * Output only. The type of models.
   * For more information, see [Supported models in BigQuery ML]
   * (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).
   * </pre>
   *
   * <code>MODEL = 5;</code>
   */
  MODEL(5),
  /**
   * <pre>
   * An entry type for streaming entries. For example, a Pub/Sub topic.
   * </pre>
   *
   * <code>DATA_STREAM = 3;</code>
   */
  DATA_STREAM(3),
  /**
   * <pre>
   * An entry type for a set of files or objects. For example, a
   * Cloud Storage fileset.
   * </pre>
   *
   * <code>FILESET = 4;</code>
   */
  FILESET(4),
  /**
   * <pre>
   * A group of servers that work together. For example, a Kafka cluster.
   * </pre>
   *
   * <code>CLUSTER = 6;</code>
   */
  CLUSTER(6),
  /**
   * <pre>
   * A database.
   * </pre>
   *
   * <code>DATABASE = 7;</code>
   */
  DATABASE(7),
  /**
   * <pre>
   * Output only. Connection to a data source. For example, a BigQuery
   * connection.
   * </pre>
   *
   * <code>DATA_SOURCE_CONNECTION = 8;</code>
   */
  DATA_SOURCE_CONNECTION(8),
  /**
   * <pre>
   * Output only. Routine, for example, a BigQuery routine.
   * </pre>
   *
   * <code>ROUTINE = 9;</code>
   */
  ROUTINE(9),
  /**
   * <pre>
   * A Dataplex lake.
   * </pre>
   *
   * <code>LAKE = 10;</code>
   */
  LAKE(10),
  /**
   * <pre>
   * A Dataplex zone.
   * </pre>
   *
   * <code>ZONE = 11;</code>
   */
  ZONE(11),
  /**
   * <pre>
   * A service, for example, a Dataproc Metastore service.
   * </pre>
   *
   * <code>SERVICE = 14;</code>
   */
  SERVICE(14),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Default unknown type.
   * </pre>
   *
   * <code>ENTRY_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int ENTRY_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The entry type that has a GoogleSQL schema, including
   * logical views.
   * </pre>
   *
   * <code>TABLE = 2;</code>
   */
  public static final int TABLE_VALUE = 2;
  /**
   * <pre>
   * Output only. The type of models.
   * For more information, see [Supported models in BigQuery ML]
   * (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).
   * </pre>
   *
   * <code>MODEL = 5;</code>
   */
  public static final int MODEL_VALUE = 5;
  /**
   * <pre>
   * An entry type for streaming entries. For example, a Pub/Sub topic.
   * </pre>
   *
   * <code>DATA_STREAM = 3;</code>
   */
  public static final int DATA_STREAM_VALUE = 3;
  /**
   * <pre>
   * An entry type for a set of files or objects. For example, a
   * Cloud Storage fileset.
   * </pre>
   *
   * <code>FILESET = 4;</code>
   */
  public static final int FILESET_VALUE = 4;
  /**
   * <pre>
   * A group of servers that work together. For example, a Kafka cluster.
   * </pre>
   *
   * <code>CLUSTER = 6;</code>
   */
  public static final int CLUSTER_VALUE = 6;
  /**
   * <pre>
   * A database.
   * </pre>
   *
   * <code>DATABASE = 7;</code>
   */
  public static final int DATABASE_VALUE = 7;
  /**
   * <pre>
   * Output only. Connection to a data source. For example, a BigQuery
   * connection.
   * </pre>
   *
   * <code>DATA_SOURCE_CONNECTION = 8;</code>
   */
  public static final int DATA_SOURCE_CONNECTION_VALUE = 8;
  /**
   * <pre>
   * Output only. Routine, for example, a BigQuery routine.
   * </pre>
   *
   * <code>ROUTINE = 9;</code>
   */
  public static final int ROUTINE_VALUE = 9;
  /**
   * <pre>
   * A Dataplex lake.
   * </pre>
   *
   * <code>LAKE = 10;</code>
   */
  public static final int LAKE_VALUE = 10;
  /**
   * <pre>
   * A Dataplex zone.
   * </pre>
   *
   * <code>ZONE = 11;</code>
   */
  public static final int ZONE_VALUE = 11;
  /**
   * <pre>
   * A service, for example, a Dataproc Metastore service.
   * </pre>
   *
   * <code>SERVICE = 14;</code>
   */
  public static final int SERVICE_VALUE = 14;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EntryType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static EntryType forNumber(int value) {
    switch (value) {
      case 0: return ENTRY_TYPE_UNSPECIFIED;
      case 2: return TABLE;
      case 5: return MODEL;
      case 3: return DATA_STREAM;
      case 4: return FILESET;
      case 6: return CLUSTER;
      case 7: return DATABASE;
      case 8: return DATA_SOURCE_CONNECTION;
      case 9: return ROUTINE;
      case 10: return LAKE;
      case 11: return ZONE;
      case 14: return SERVICE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EntryType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EntryType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EntryType>() {
          public EntryType findValueByNumber(int number) {
            return EntryType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.datacatalog.v1.Datacatalog.getDescriptor().getEnumTypes().get(0);
  }

  private static final EntryType[] VALUES = values();

  public static EntryType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EntryType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.datacatalog.v1.EntryType)
}

